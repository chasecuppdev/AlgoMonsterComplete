Title: "Quick Sort"
Description: "Divide & conquer sorting using in-place Hoare partitioning with dual pointers"
Pattern: "advanced-sorting"
AlgoMonsterReference: "https://algo.monster/problems/advanced_sorting"

MySolution:
  ComplexityAnalysis:
    Time: "O(n log n) avg, O(n^2) worst"
    Space: "O(log n)"
    Stable: false
    InPlace: true
  
  Implementation: |
    public static List<int> SortList(List<int> list)
    {
        // WRITE YOUR BRILLIANT CODE HERE
        // QuickSort (In-Place)
        SortListInterval(list, 0, list.Count - 1);
        
        return list; //Hopefully now sorted 
    }
    
     public static void SortListInterval(List<int> list, int startIndex, int endIndex)
     {
         if (startIndex >= endIndex) 
             return;
         int pivotValue = list[startIndex];
         int leftPointer = startIndex - 1, rightPointer = endIndex + 1;
         
         while (true)
         {
             do {leftPointer++;} while (list[leftPointer] < pivotValue);
             do {rightPointer--;} while (list[rightPointer] > pivotValue);
             if (leftPointer >= rightPointer)
             {
                 SortListInterval(list, startIndex, rightPointer);
                 SortListInterval(list, rightPointer + 1, endIndex);
                 return;
             }
             int temp = list[leftPointer];
             list[leftPointer] = list[rightPointer];
             list[rightPointer] = temp;
         }
     }

TestCases:
  - Input: "[]"
    Expected: "[]"
    Notes: "Empty array - base case test"
  
  - Input: "[42]"
    Expected: "[42]"
    Notes: "Single element - base case test"
  
  - Input: "[3, 1]"
    Expected: "[1, 3]"
    Notes: "Two elements - minimal partition test"
  
  - Input: "[1, 2, 3, 4, 5]"
    Expected: "[1, 2, 3, 4, 5]"
    Notes: "Already sorted - worst case for first-element pivot"
  
  - Input: "[5, 4, 3, 2, 1]"
    Expected: "[1, 2, 3, 4, 5]"
    Notes: "Reverse sorted - also worst case scenario"
  
  - Input: "[3, 1, 4, 1, 5, 9, 2, 6, 5]"
    Expected: "[1, 1, 2, 3, 4, 5, 5, 6, 9]"
    Notes: "Mixed duplicates - Hoare partitioning handles duplicates well"
  
  - Input: "[5, 5, 5, 5, 5]"
    Expected: "[5, 5, 5, 5, 5]"
    Notes: "All duplicates - edge case for partitioning logic"
  
  - Input: "[8, 3, 1, 7, 0, 10, 2]"
    Expected: "[0, 1, 2, 3, 7, 8, 10]"
    Notes: "Random order - typical best case for QuickSort"
  
  - Input: "[-5, -1, -10, 0, 3]"
    Expected: "[-10, -5, -1, 0, 3]"
    Notes: "Mixed positive/negative numbers"
  
  - Input: "[64, 34, 25, 12, 22, 11, 90, 88, 76, 50, 42]"
    Expected: "[11, 12, 22, 25, 34, 42, 50, 64, 76, 88, 90]"
    Notes: "Comprehensive partitioning test - multiple recursive levels"