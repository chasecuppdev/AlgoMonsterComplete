Title: "Merge Sort"
Description: "Divide & conquer sorting using recursive splitting and two-pointer merging"
Pattern: "advanced-sorting"
AlgoMonsterReference: "https://algo.monster/problems/advanced_sorting"

MySolution:
  ComplexityAnalysis:
    Time: "O(n log n)"
    Space: "O(n)"
    Stable: true
    InPlace: false
  
  Implementation: |
    public static List<int> SortList(List<int> unsortedList)
    {
        // WRITE YOUR BRILLIANT CODE HERE
        // MergeSort
        List<int> sortedList = SortListInterval(unsortedList);
        
        return sortedList; //Hopefully now sorted 
    }
    
     public static List<int> SortListInterval(List<int> list)
     {
         int n = list.Count;
         if (n <= 1) 
             return list;
         
         //Split Logic
         int midpoint = n / 2;
         List<int> leftList = SortListInterval(list.GetRange(0, midpoint));
         List<int> rightList = SortListInterval(list.GetRange(midpoint, n - midpoint));
         
         List<int> resultList = new List<int>();
         int leftPointer = 0, rightPointer = 0;
         
         //Merge Logic
         while (leftPointer < leftList.Count && rightPointer < rightList.Count)
         {
             if (leftList[leftPointer] < rightList[rightPointer])
             {
                 resultList.Add(leftList[leftPointer++]);
             }
             else
             {
                 resultList.Add(rightList[rightPointer++]);
             }
         }
         
         while (leftPointer < leftList.Count)
             resultList.Add(leftList[leftPointer++]);
         while (rightPointer < rightList.Count)
             resultList.Add(rightList[rightPointer++]);
         return resultList;
     }

TestCases:
  - Input: "[]"
    Expected: "[]"
    Notes: "Empty array - base case test"
  
  - Input: "[42]"
    Expected: "[42]"
    Notes: "Single element - base case test"
  
  - Input: "[3, 1]"
    Expected: "[1, 3]"
    Notes: "Two elements - minimal merge test"
  
  - Input: "[1, 2, 3, 4, 5]"
    Expected: "[1, 2, 3, 4, 5]"
    Notes: "Already sorted - best case scenario"
  
  - Input: "[5, 4, 3, 2, 1]"
    Expected: "[1, 2, 3, 4, 5]"
    Notes: "Reverse sorted - tests all recursive levels"
  
  - Input: "[3, 1, 4, 1, 5, 9, 2, 6, 5]"
    Expected: "[1, 1, 2, 3, 4, 5, 5, 6, 9]"
    Notes: "Mixed duplicates - stability verification"
  
  - Input: "[8, 3, 1, 7, 0, 10, 2]"
    Expected: "[0, 1, 2, 3, 7, 8, 10]"
    Notes: "Odd number of elements - asymmetric split test"
  
  - Input: "[-5, -1, -10, 0, 3]"
    Expected: "[-10, -5, -1, 0, 3]"
    Notes: "Mixed positive/negative numbers"
  
  - Input: "[2147483647, -2147483648, 0, 1000000, -1000000]"
    Expected: "[-2147483648, -1000000, 0, 1000000, 2147483647]"
    Notes: "Integer boundary values and large numbers"
  
  - Input: "[64, 34, 25, 12, 22, 11, 90, 88, 76, 50, 42]"
    Expected: "[11, 12, 22, 25, 34, 42, 50, 64, 76, 88, 90]"
    Notes: "Comprehensive divide & conquer test - multiple recursive levels"